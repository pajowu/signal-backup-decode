// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `Backups.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct SqlStatement {
    // message fields
    statement: ::protobuf::SingularField<::std::string::String>,
    pub parameters: ::protobuf::RepeatedField<SqlStatement_SqlParameter>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SqlStatement {
    fn default() -> &'a SqlStatement {
        <SqlStatement as ::protobuf::Message>::default_instance()
    }
}

impl SqlStatement {
    pub fn new() -> SqlStatement {
        ::std::default::Default::default()
    }

    // optional string statement = 1;


    pub fn get_statement(&self) -> &str {
        match self.statement.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_statement(&mut self) {
        self.statement.clear();
    }

    pub fn has_statement(&self) -> bool {
        self.statement.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statement(&mut self, v: ::std::string::String) {
        self.statement = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statement(&mut self) -> &mut ::std::string::String {
        if self.statement.is_none() {
            self.statement.set_default();
        }
        self.statement.as_mut().unwrap()
    }

    // Take field
    pub fn take_statement(&mut self) -> ::std::string::String {
        self.statement.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .signal.SqlStatement.SqlParameter parameters = 2;


    pub fn get_parameters(&self) -> &[SqlStatement_SqlParameter] {
        &self.parameters
    }
    pub fn clear_parameters(&mut self) {
        self.parameters.clear();
    }

    // Param is passed by value, moved
    pub fn set_parameters(&mut self, v: ::protobuf::RepeatedField<SqlStatement_SqlParameter>) {
        self.parameters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_parameters(&mut self) -> &mut ::protobuf::RepeatedField<SqlStatement_SqlParameter> {
        &mut self.parameters
    }

    // Take field
    pub fn take_parameters(&mut self) -> ::protobuf::RepeatedField<SqlStatement_SqlParameter> {
        ::std::mem::replace(&mut self.parameters, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SqlStatement {
    fn is_initialized(&self) -> bool {
        for v in &self.parameters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.statement)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.parameters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.statement.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.parameters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.statement.as_ref() {
            os.write_string(1, &v)?;
        }
        for v in &self.parameters {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SqlStatement {
        SqlStatement::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "statement",
                |m: &SqlStatement| { &m.statement },
                |m: &mut SqlStatement| { &mut m.statement },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SqlStatement_SqlParameter>>(
                "parameters",
                |m: &SqlStatement| { &m.parameters },
                |m: &mut SqlStatement| { &mut m.parameters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SqlStatement>(
                "SqlStatement",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SqlStatement {
        static instance: ::protobuf::rt::LazyV2<SqlStatement> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SqlStatement::new)
    }
}

impl ::protobuf::Clear for SqlStatement {
    fn clear(&mut self) {
        self.statement.clear();
        self.parameters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SqlStatement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SqlStatement {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SqlStatement_SqlParameter {
    // message fields
    stringParamter: ::protobuf::SingularField<::std::string::String>,
    integerParameter: ::std::option::Option<u64>,
    doubleParameter: ::std::option::Option<f64>,
    blobParameter: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    nullparameter: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SqlStatement_SqlParameter {
    fn default() -> &'a SqlStatement_SqlParameter {
        <SqlStatement_SqlParameter as ::protobuf::Message>::default_instance()
    }
}

impl SqlStatement_SqlParameter {
    pub fn new() -> SqlStatement_SqlParameter {
        ::std::default::Default::default()
    }

    // optional string stringParamter = 1;


    pub fn get_stringParamter(&self) -> &str {
        match self.stringParamter.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_stringParamter(&mut self) {
        self.stringParamter.clear();
    }

    pub fn has_stringParamter(&self) -> bool {
        self.stringParamter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stringParamter(&mut self, v: ::std::string::String) {
        self.stringParamter = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stringParamter(&mut self) -> &mut ::std::string::String {
        if self.stringParamter.is_none() {
            self.stringParamter.set_default();
        }
        self.stringParamter.as_mut().unwrap()
    }

    // Take field
    pub fn take_stringParamter(&mut self) -> ::std::string::String {
        self.stringParamter.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 integerParameter = 2;


    pub fn get_integerParameter(&self) -> u64 {
        self.integerParameter.unwrap_or(0)
    }
    pub fn clear_integerParameter(&mut self) {
        self.integerParameter = ::std::option::Option::None;
    }

    pub fn has_integerParameter(&self) -> bool {
        self.integerParameter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_integerParameter(&mut self, v: u64) {
        self.integerParameter = ::std::option::Option::Some(v);
    }

    // optional double doubleParameter = 3;


    pub fn get_doubleParameter(&self) -> f64 {
        self.doubleParameter.unwrap_or(0.)
    }
    pub fn clear_doubleParameter(&mut self) {
        self.doubleParameter = ::std::option::Option::None;
    }

    pub fn has_doubleParameter(&self) -> bool {
        self.doubleParameter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_doubleParameter(&mut self, v: f64) {
        self.doubleParameter = ::std::option::Option::Some(v);
    }

    // optional bytes blobParameter = 4;


    pub fn get_blobParameter(&self) -> &[u8] {
        match self.blobParameter.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_blobParameter(&mut self) {
        self.blobParameter.clear();
    }

    pub fn has_blobParameter(&self) -> bool {
        self.blobParameter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blobParameter(&mut self, v: ::std::vec::Vec<u8>) {
        self.blobParameter = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blobParameter(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.blobParameter.is_none() {
            self.blobParameter.set_default();
        }
        self.blobParameter.as_mut().unwrap()
    }

    // Take field
    pub fn take_blobParameter(&mut self) -> ::std::vec::Vec<u8> {
        self.blobParameter.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bool nullparameter = 5;


    pub fn get_nullparameter(&self) -> bool {
        self.nullparameter.unwrap_or(false)
    }
    pub fn clear_nullparameter(&mut self) {
        self.nullparameter = ::std::option::Option::None;
    }

    pub fn has_nullparameter(&self) -> bool {
        self.nullparameter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nullparameter(&mut self, v: bool) {
        self.nullparameter = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SqlStatement_SqlParameter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.stringParamter)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.integerParameter = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.doubleParameter = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.blobParameter)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.nullparameter = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.stringParamter.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.integerParameter {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.doubleParameter {
            my_size += 9;
        }
        if let Some(ref v) = self.blobParameter.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.nullparameter {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.stringParamter.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.integerParameter {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.doubleParameter {
            os.write_double(3, v)?;
        }
        if let Some(ref v) = self.blobParameter.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(v) = self.nullparameter {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SqlStatement_SqlParameter {
        SqlStatement_SqlParameter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stringParamter",
                |m: &SqlStatement_SqlParameter| { &m.stringParamter },
                |m: &mut SqlStatement_SqlParameter| { &mut m.stringParamter },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "integerParameter",
                |m: &SqlStatement_SqlParameter| { &m.integerParameter },
                |m: &mut SqlStatement_SqlParameter| { &mut m.integerParameter },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "doubleParameter",
                |m: &SqlStatement_SqlParameter| { &m.doubleParameter },
                |m: &mut SqlStatement_SqlParameter| { &mut m.doubleParameter },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "blobParameter",
                |m: &SqlStatement_SqlParameter| { &m.blobParameter },
                |m: &mut SqlStatement_SqlParameter| { &mut m.blobParameter },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "nullparameter",
                |m: &SqlStatement_SqlParameter| { &m.nullparameter },
                |m: &mut SqlStatement_SqlParameter| { &mut m.nullparameter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SqlStatement_SqlParameter>(
                "SqlStatement.SqlParameter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SqlStatement_SqlParameter {
        static instance: ::protobuf::rt::LazyV2<SqlStatement_SqlParameter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SqlStatement_SqlParameter::new)
    }
}

impl ::protobuf::Clear for SqlStatement_SqlParameter {
    fn clear(&mut self) {
        self.stringParamter.clear();
        self.integerParameter = ::std::option::Option::None;
        self.doubleParameter = ::std::option::Option::None;
        self.blobParameter.clear();
        self.nullparameter = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SqlStatement_SqlParameter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SqlStatement_SqlParameter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SharedPreference {
    // message fields
    file: ::protobuf::SingularField<::std::string::String>,
    key: ::protobuf::SingularField<::std::string::String>,
    value: ::protobuf::SingularField<::std::string::String>,
    booleanValue: ::std::option::Option<bool>,
    pub stringSetValue: ::protobuf::RepeatedField<::std::string::String>,
    isStringSetValue: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SharedPreference {
    fn default() -> &'a SharedPreference {
        <SharedPreference as ::protobuf::Message>::default_instance()
    }
}

impl SharedPreference {
    pub fn new() -> SharedPreference {
        ::std::default::Default::default()
    }

    // optional string file = 1;


    pub fn get_file(&self) -> &str {
        match self.file.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_file(&mut self) {
        self.file.clear();
    }

    pub fn has_file(&self) -> bool {
        self.file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file(&mut self, v: ::std::string::String) {
        self.file = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file(&mut self) -> &mut ::std::string::String {
        if self.file.is_none() {
            self.file.set_default();
        }
        self.file.as_mut().unwrap()
    }

    // Take field
    pub fn take_file(&mut self) -> ::std::string::String {
        self.file.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string key = 2;


    pub fn get_key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string value = 3;


    pub fn get_value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool booleanValue = 4;


    pub fn get_booleanValue(&self) -> bool {
        self.booleanValue.unwrap_or(false)
    }
    pub fn clear_booleanValue(&mut self) {
        self.booleanValue = ::std::option::Option::None;
    }

    pub fn has_booleanValue(&self) -> bool {
        self.booleanValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_booleanValue(&mut self, v: bool) {
        self.booleanValue = ::std::option::Option::Some(v);
    }

    // repeated string stringSetValue = 5;


    pub fn get_stringSetValue(&self) -> &[::std::string::String] {
        &self.stringSetValue
    }
    pub fn clear_stringSetValue(&mut self) {
        self.stringSetValue.clear();
    }

    // Param is passed by value, moved
    pub fn set_stringSetValue(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.stringSetValue = v;
    }

    // Mutable pointer to the field.
    pub fn mut_stringSetValue(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.stringSetValue
    }

    // Take field
    pub fn take_stringSetValue(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.stringSetValue, ::protobuf::RepeatedField::new())
    }

    // optional bool isStringSetValue = 6;


    pub fn get_isStringSetValue(&self) -> bool {
        self.isStringSetValue.unwrap_or(false)
    }
    pub fn clear_isStringSetValue(&mut self) {
        self.isStringSetValue = ::std::option::Option::None;
    }

    pub fn has_isStringSetValue(&self) -> bool {
        self.isStringSetValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_isStringSetValue(&mut self, v: bool) {
        self.isStringSetValue = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SharedPreference {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.file)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.value)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.booleanValue = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.stringSetValue)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isStringSetValue = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.file.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.booleanValue {
            my_size += 2;
        }
        for value in &self.stringSetValue {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if let Some(v) = self.isStringSetValue {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.file.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.key.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.booleanValue {
            os.write_bool(4, v)?;
        }
        for v in &self.stringSetValue {
            os.write_string(5, &v)?;
        };
        if let Some(v) = self.isStringSetValue {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SharedPreference {
        SharedPreference::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "file",
                |m: &SharedPreference| { &m.file },
                |m: &mut SharedPreference| { &mut m.file },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &SharedPreference| { &m.key },
                |m: &mut SharedPreference| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &SharedPreference| { &m.value },
                |m: &mut SharedPreference| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "booleanValue",
                |m: &SharedPreference| { &m.booleanValue },
                |m: &mut SharedPreference| { &mut m.booleanValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stringSetValue",
                |m: &SharedPreference| { &m.stringSetValue },
                |m: &mut SharedPreference| { &mut m.stringSetValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "isStringSetValue",
                |m: &SharedPreference| { &m.isStringSetValue },
                |m: &mut SharedPreference| { &mut m.isStringSetValue },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SharedPreference>(
                "SharedPreference",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SharedPreference {
        static instance: ::protobuf::rt::LazyV2<SharedPreference> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SharedPreference::new)
    }
}

impl ::protobuf::Clear for SharedPreference {
    fn clear(&mut self) {
        self.file.clear();
        self.key.clear();
        self.value.clear();
        self.booleanValue = ::std::option::Option::None;
        self.stringSetValue.clear();
        self.isStringSetValue = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SharedPreference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SharedPreference {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Attachment {
    // message fields
    rowId: ::std::option::Option<u64>,
    attachmentId: ::std::option::Option<u64>,
    length: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Attachment {
    fn default() -> &'a Attachment {
        <Attachment as ::protobuf::Message>::default_instance()
    }
}

impl Attachment {
    pub fn new() -> Attachment {
        ::std::default::Default::default()
    }

    // optional uint64 rowId = 1;


    pub fn get_rowId(&self) -> u64 {
        self.rowId.unwrap_or(0)
    }
    pub fn clear_rowId(&mut self) {
        self.rowId = ::std::option::Option::None;
    }

    pub fn has_rowId(&self) -> bool {
        self.rowId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rowId(&mut self, v: u64) {
        self.rowId = ::std::option::Option::Some(v);
    }

    // optional uint64 attachmentId = 2;


    pub fn get_attachmentId(&self) -> u64 {
        self.attachmentId.unwrap_or(0)
    }
    pub fn clear_attachmentId(&mut self) {
        self.attachmentId = ::std::option::Option::None;
    }

    pub fn has_attachmentId(&self) -> bool {
        self.attachmentId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attachmentId(&mut self, v: u64) {
        self.attachmentId = ::std::option::Option::Some(v);
    }

    // optional uint32 length = 3;


    pub fn get_length(&self) -> u32 {
        self.length.unwrap_or(0)
    }
    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u32) {
        self.length = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Attachment {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.rowId = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.attachmentId = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.length = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.rowId {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.attachmentId {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.rowId {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.attachmentId {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.length {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Attachment {
        Attachment::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "rowId",
                |m: &Attachment| { &m.rowId },
                |m: &mut Attachment| { &mut m.rowId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "attachmentId",
                |m: &Attachment| { &m.attachmentId },
                |m: &mut Attachment| { &mut m.attachmentId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "length",
                |m: &Attachment| { &m.length },
                |m: &mut Attachment| { &mut m.length },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Attachment>(
                "Attachment",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Attachment {
        static instance: ::protobuf::rt::LazyV2<Attachment> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Attachment::new)
    }
}

impl ::protobuf::Clear for Attachment {
    fn clear(&mut self) {
        self.rowId = ::std::option::Option::None;
        self.attachmentId = ::std::option::Option::None;
        self.length = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Attachment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Attachment {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Sticker {
    // message fields
    rowId: ::std::option::Option<u64>,
    length: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Sticker {
    fn default() -> &'a Sticker {
        <Sticker as ::protobuf::Message>::default_instance()
    }
}

impl Sticker {
    pub fn new() -> Sticker {
        ::std::default::Default::default()
    }

    // optional uint64 rowId = 1;


    pub fn get_rowId(&self) -> u64 {
        self.rowId.unwrap_or(0)
    }
    pub fn clear_rowId(&mut self) {
        self.rowId = ::std::option::Option::None;
    }

    pub fn has_rowId(&self) -> bool {
        self.rowId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rowId(&mut self, v: u64) {
        self.rowId = ::std::option::Option::Some(v);
    }

    // optional uint32 length = 2;


    pub fn get_length(&self) -> u32 {
        self.length.unwrap_or(0)
    }
    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u32) {
        self.length = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Sticker {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.rowId = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.length = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.rowId {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.rowId {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.length {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Sticker {
        Sticker::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "rowId",
                |m: &Sticker| { &m.rowId },
                |m: &mut Sticker| { &mut m.rowId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "length",
                |m: &Sticker| { &m.length },
                |m: &mut Sticker| { &mut m.length },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Sticker>(
                "Sticker",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Sticker {
        static instance: ::protobuf::rt::LazyV2<Sticker> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Sticker::new)
    }
}

impl ::protobuf::Clear for Sticker {
    fn clear(&mut self) {
        self.rowId = ::std::option::Option::None;
        self.length = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Sticker {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sticker {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Avatar {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    recipientId: ::protobuf::SingularField<::std::string::String>,
    length: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Avatar {
    fn default() -> &'a Avatar {
        <Avatar as ::protobuf::Message>::default_instance()
    }
}

impl Avatar {
    pub fn new() -> Avatar {
        ::std::default::Default::default()
    }

    // optional string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string recipientId = 3;


    pub fn get_recipientId(&self) -> &str {
        match self.recipientId.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_recipientId(&mut self) {
        self.recipientId.clear();
    }

    pub fn has_recipientId(&self) -> bool {
        self.recipientId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recipientId(&mut self, v: ::std::string::String) {
        self.recipientId = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipientId(&mut self) -> &mut ::std::string::String {
        if self.recipientId.is_none() {
            self.recipientId.set_default();
        }
        self.recipientId.as_mut().unwrap()
    }

    // Take field
    pub fn take_recipientId(&mut self) -> ::std::string::String {
        self.recipientId.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 length = 2;


    pub fn get_length(&self) -> u32 {
        self.length.unwrap_or(0)
    }
    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u32) {
        self.length = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Avatar {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.recipientId)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.length = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.recipientId.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.recipientId.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.length {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Avatar {
        Avatar::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Avatar| { &m.name },
                |m: &mut Avatar| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "recipientId",
                |m: &Avatar| { &m.recipientId },
                |m: &mut Avatar| { &mut m.recipientId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "length",
                |m: &Avatar| { &m.length },
                |m: &mut Avatar| { &mut m.length },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Avatar>(
                "Avatar",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Avatar {
        static instance: ::protobuf::rt::LazyV2<Avatar> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Avatar::new)
    }
}

impl ::protobuf::Clear for Avatar {
    fn clear(&mut self) {
        self.name.clear();
        self.recipientId.clear();
        self.length = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Avatar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Avatar {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatabaseVersion {
    // message fields
    version: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DatabaseVersion {
    fn default() -> &'a DatabaseVersion {
        <DatabaseVersion as ::protobuf::Message>::default_instance()
    }
}

impl DatabaseVersion {
    pub fn new() -> DatabaseVersion {
        ::std::default::Default::default()
    }

    // optional uint32 version = 1;


    pub fn get_version(&self) -> u32 {
        self.version.unwrap_or(0)
    }
    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for DatabaseVersion {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.version {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatabaseVersion {
        DatabaseVersion::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "version",
                |m: &DatabaseVersion| { &m.version },
                |m: &mut DatabaseVersion| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DatabaseVersion>(
                "DatabaseVersion",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DatabaseVersion {
        static instance: ::protobuf::rt::LazyV2<DatabaseVersion> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DatabaseVersion::new)
    }
}

impl ::protobuf::Clear for DatabaseVersion {
    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatabaseVersion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseVersion {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Header {
    // message fields
    iv: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    salt: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    // optional bytes iv = 1;


    pub fn get_iv(&self) -> &[u8] {
        match self.iv.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_iv(&mut self) {
        self.iv.clear();
    }

    pub fn has_iv(&self) -> bool {
        self.iv.is_some()
    }

    // Param is passed by value, moved
    pub fn set_iv(&mut self, v: ::std::vec::Vec<u8>) {
        self.iv = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_iv(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.iv.is_none() {
            self.iv.set_default();
        }
        self.iv.as_mut().unwrap()
    }

    // Take field
    pub fn take_iv(&mut self) -> ::std::vec::Vec<u8> {
        self.iv.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes salt = 2;


    pub fn get_salt(&self) -> &[u8] {
        match self.salt.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_salt(&mut self) {
        self.salt.clear();
    }

    pub fn has_salt(&self) -> bool {
        self.salt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_salt(&mut self, v: ::std::vec::Vec<u8>) {
        self.salt = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_salt(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.salt.is_none() {
            self.salt.set_default();
        }
        self.salt.as_mut().unwrap()
    }

    // Take field
    pub fn take_salt(&mut self) -> ::std::vec::Vec<u8> {
        self.salt.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Header {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.iv)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.salt)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.iv.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.salt.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.iv.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.salt.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Header {
        Header::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "iv",
                |m: &Header| { &m.iv },
                |m: &mut Header| { &mut m.iv },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "salt",
                |m: &Header| { &m.salt },
                |m: &mut Header| { &mut m.salt },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Header>(
                "Header",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Header {
        static instance: ::protobuf::rt::LazyV2<Header> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Header::new)
    }
}

impl ::protobuf::Clear for Header {
    fn clear(&mut self) {
        self.iv.clear();
        self.salt.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct KeyValue {
    // message fields
    key: ::protobuf::SingularField<::std::string::String>,
    blobValue: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    booleanValue: ::std::option::Option<bool>,
    floatValue: ::std::option::Option<f32>,
    integerValue: ::std::option::Option<i32>,
    longValue: ::std::option::Option<i64>,
    stringValue: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyValue {
    fn default() -> &'a KeyValue {
        <KeyValue as ::protobuf::Message>::default_instance()
    }
}

impl KeyValue {
    pub fn new() -> KeyValue {
        ::std::default::Default::default()
    }

    // optional string key = 1;


    pub fn get_key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes blobValue = 2;


    pub fn get_blobValue(&self) -> &[u8] {
        match self.blobValue.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_blobValue(&mut self) {
        self.blobValue.clear();
    }

    pub fn has_blobValue(&self) -> bool {
        self.blobValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blobValue(&mut self, v: ::std::vec::Vec<u8>) {
        self.blobValue = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blobValue(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.blobValue.is_none() {
            self.blobValue.set_default();
        }
        self.blobValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_blobValue(&mut self) -> ::std::vec::Vec<u8> {
        self.blobValue.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bool booleanValue = 3;


    pub fn get_booleanValue(&self) -> bool {
        self.booleanValue.unwrap_or(false)
    }
    pub fn clear_booleanValue(&mut self) {
        self.booleanValue = ::std::option::Option::None;
    }

    pub fn has_booleanValue(&self) -> bool {
        self.booleanValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_booleanValue(&mut self, v: bool) {
        self.booleanValue = ::std::option::Option::Some(v);
    }

    // optional float floatValue = 4;


    pub fn get_floatValue(&self) -> f32 {
        self.floatValue.unwrap_or(0.)
    }
    pub fn clear_floatValue(&mut self) {
        self.floatValue = ::std::option::Option::None;
    }

    pub fn has_floatValue(&self) -> bool {
        self.floatValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_floatValue(&mut self, v: f32) {
        self.floatValue = ::std::option::Option::Some(v);
    }

    // optional int32 integerValue = 5;


    pub fn get_integerValue(&self) -> i32 {
        self.integerValue.unwrap_or(0)
    }
    pub fn clear_integerValue(&mut self) {
        self.integerValue = ::std::option::Option::None;
    }

    pub fn has_integerValue(&self) -> bool {
        self.integerValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_integerValue(&mut self, v: i32) {
        self.integerValue = ::std::option::Option::Some(v);
    }

    // optional int64 longValue = 6;


    pub fn get_longValue(&self) -> i64 {
        self.longValue.unwrap_or(0)
    }
    pub fn clear_longValue(&mut self) {
        self.longValue = ::std::option::Option::None;
    }

    pub fn has_longValue(&self) -> bool {
        self.longValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_longValue(&mut self, v: i64) {
        self.longValue = ::std::option::Option::Some(v);
    }

    // optional string stringValue = 7;


    pub fn get_stringValue(&self) -> &str {
        match self.stringValue.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_stringValue(&mut self) {
        self.stringValue.clear();
    }

    pub fn has_stringValue(&self) -> bool {
        self.stringValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stringValue(&mut self, v: ::std::string::String) {
        self.stringValue = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stringValue(&mut self) -> &mut ::std::string::String {
        if self.stringValue.is_none() {
            self.stringValue.set_default();
        }
        self.stringValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_stringValue(&mut self) -> ::std::string::String {
        self.stringValue.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for KeyValue {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.blobValue)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.booleanValue = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.floatValue = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.integerValue = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.longValue = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.stringValue)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.blobValue.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.booleanValue {
            my_size += 2;
        }
        if let Some(v) = self.floatValue {
            my_size += 5;
        }
        if let Some(v) = self.integerValue {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.longValue {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.stringValue.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.blobValue.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.booleanValue {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.floatValue {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.integerValue {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.longValue {
            os.write_int64(6, v)?;
        }
        if let Some(ref v) = self.stringValue.as_ref() {
            os.write_string(7, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeyValue {
        KeyValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &KeyValue| { &m.key },
                |m: &mut KeyValue| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "blobValue",
                |m: &KeyValue| { &m.blobValue },
                |m: &mut KeyValue| { &mut m.blobValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "booleanValue",
                |m: &KeyValue| { &m.booleanValue },
                |m: &mut KeyValue| { &mut m.booleanValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "floatValue",
                |m: &KeyValue| { &m.floatValue },
                |m: &mut KeyValue| { &mut m.floatValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "integerValue",
                |m: &KeyValue| { &m.integerValue },
                |m: &mut KeyValue| { &mut m.integerValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "longValue",
                |m: &KeyValue| { &m.longValue },
                |m: &mut KeyValue| { &mut m.longValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stringValue",
                |m: &KeyValue| { &m.stringValue },
                |m: &mut KeyValue| { &mut m.stringValue },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<KeyValue>(
                "KeyValue",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static KeyValue {
        static instance: ::protobuf::rt::LazyV2<KeyValue> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KeyValue::new)
    }
}

impl ::protobuf::Clear for KeyValue {
    fn clear(&mut self) {
        self.key.clear();
        self.blobValue.clear();
        self.booleanValue = ::std::option::Option::None;
        self.floatValue = ::std::option::Option::None;
        self.integerValue = ::std::option::Option::None;
        self.longValue = ::std::option::Option::None;
        self.stringValue.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KeyValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyValue {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BackupFrame {
    // message fields
    pub header: ::protobuf::SingularPtrField<Header>,
    pub statement: ::protobuf::SingularPtrField<SqlStatement>,
    pub preference: ::protobuf::SingularPtrField<SharedPreference>,
    pub attachment: ::protobuf::SingularPtrField<Attachment>,
    pub version: ::protobuf::SingularPtrField<DatabaseVersion>,
    end: ::std::option::Option<bool>,
    pub avatar: ::protobuf::SingularPtrField<Avatar>,
    pub sticker: ::protobuf::SingularPtrField<Sticker>,
    pub keyValue: ::protobuf::SingularPtrField<KeyValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BackupFrame {
    fn default() -> &'a BackupFrame {
        <BackupFrame as ::protobuf::Message>::default_instance()
    }
}

impl BackupFrame {
    pub fn new() -> BackupFrame {
        ::std::default::Default::default()
    }

    // optional .signal.Header header = 1;


    pub fn get_header(&self) -> &Header {
        self.header.as_ref().unwrap_or_else(|| <Header as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: Header) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut Header {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> Header {
        self.header.take().unwrap_or_else(|| Header::new())
    }

    // optional .signal.SqlStatement statement = 2;


    pub fn get_statement(&self) -> &SqlStatement {
        self.statement.as_ref().unwrap_or_else(|| <SqlStatement as ::protobuf::Message>::default_instance())
    }
    pub fn clear_statement(&mut self) {
        self.statement.clear();
    }

    pub fn has_statement(&self) -> bool {
        self.statement.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statement(&mut self, v: SqlStatement) {
        self.statement = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statement(&mut self) -> &mut SqlStatement {
        if self.statement.is_none() {
            self.statement.set_default();
        }
        self.statement.as_mut().unwrap()
    }

    // Take field
    pub fn take_statement(&mut self) -> SqlStatement {
        self.statement.take().unwrap_or_else(|| SqlStatement::new())
    }

    // optional .signal.SharedPreference preference = 3;


    pub fn get_preference(&self) -> &SharedPreference {
        self.preference.as_ref().unwrap_or_else(|| <SharedPreference as ::protobuf::Message>::default_instance())
    }
    pub fn clear_preference(&mut self) {
        self.preference.clear();
    }

    pub fn has_preference(&self) -> bool {
        self.preference.is_some()
    }

    // Param is passed by value, moved
    pub fn set_preference(&mut self, v: SharedPreference) {
        self.preference = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_preference(&mut self) -> &mut SharedPreference {
        if self.preference.is_none() {
            self.preference.set_default();
        }
        self.preference.as_mut().unwrap()
    }

    // Take field
    pub fn take_preference(&mut self) -> SharedPreference {
        self.preference.take().unwrap_or_else(|| SharedPreference::new())
    }

    // optional .signal.Attachment attachment = 4;


    pub fn get_attachment(&self) -> &Attachment {
        self.attachment.as_ref().unwrap_or_else(|| <Attachment as ::protobuf::Message>::default_instance())
    }
    pub fn clear_attachment(&mut self) {
        self.attachment.clear();
    }

    pub fn has_attachment(&self) -> bool {
        self.attachment.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attachment(&mut self, v: Attachment) {
        self.attachment = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attachment(&mut self) -> &mut Attachment {
        if self.attachment.is_none() {
            self.attachment.set_default();
        }
        self.attachment.as_mut().unwrap()
    }

    // Take field
    pub fn take_attachment(&mut self) -> Attachment {
        self.attachment.take().unwrap_or_else(|| Attachment::new())
    }

    // optional .signal.DatabaseVersion version = 5;


    pub fn get_version(&self) -> &DatabaseVersion {
        self.version.as_ref().unwrap_or_else(|| <DatabaseVersion as ::protobuf::Message>::default_instance())
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: DatabaseVersion) {
        self.version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut DatabaseVersion {
        if self.version.is_none() {
            self.version.set_default();
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> DatabaseVersion {
        self.version.take().unwrap_or_else(|| DatabaseVersion::new())
    }

    // optional bool end = 6;


    pub fn get_end(&self) -> bool {
        self.end.unwrap_or(false)
    }
    pub fn clear_end(&mut self) {
        self.end = ::std::option::Option::None;
    }

    pub fn has_end(&self) -> bool {
        self.end.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: bool) {
        self.end = ::std::option::Option::Some(v);
    }

    // optional .signal.Avatar avatar = 7;


    pub fn get_avatar(&self) -> &Avatar {
        self.avatar.as_ref().unwrap_or_else(|| <Avatar as ::protobuf::Message>::default_instance())
    }
    pub fn clear_avatar(&mut self) {
        self.avatar.clear();
    }

    pub fn has_avatar(&self) -> bool {
        self.avatar.is_some()
    }

    // Param is passed by value, moved
    pub fn set_avatar(&mut self, v: Avatar) {
        self.avatar = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_avatar(&mut self) -> &mut Avatar {
        if self.avatar.is_none() {
            self.avatar.set_default();
        }
        self.avatar.as_mut().unwrap()
    }

    // Take field
    pub fn take_avatar(&mut self) -> Avatar {
        self.avatar.take().unwrap_or_else(|| Avatar::new())
    }

    // optional .signal.Sticker sticker = 8;


    pub fn get_sticker(&self) -> &Sticker {
        self.sticker.as_ref().unwrap_or_else(|| <Sticker as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sticker(&mut self) {
        self.sticker.clear();
    }

    pub fn has_sticker(&self) -> bool {
        self.sticker.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sticker(&mut self, v: Sticker) {
        self.sticker = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sticker(&mut self) -> &mut Sticker {
        if self.sticker.is_none() {
            self.sticker.set_default();
        }
        self.sticker.as_mut().unwrap()
    }

    // Take field
    pub fn take_sticker(&mut self) -> Sticker {
        self.sticker.take().unwrap_or_else(|| Sticker::new())
    }

    // optional .signal.KeyValue keyValue = 9;


    pub fn get_keyValue(&self) -> &KeyValue {
        self.keyValue.as_ref().unwrap_or_else(|| <KeyValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_keyValue(&mut self) {
        self.keyValue.clear();
    }

    pub fn has_keyValue(&self) -> bool {
        self.keyValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_keyValue(&mut self, v: KeyValue) {
        self.keyValue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_keyValue(&mut self) -> &mut KeyValue {
        if self.keyValue.is_none() {
            self.keyValue.set_default();
        }
        self.keyValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_keyValue(&mut self) -> KeyValue {
        self.keyValue.take().unwrap_or_else(|| KeyValue::new())
    }
}

impl ::protobuf::Message for BackupFrame {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.statement {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.preference {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.attachment {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.version {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.avatar {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sticker {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.keyValue {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.statement)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.preference)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.attachment)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.version)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.end = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.avatar)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sticker)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.keyValue)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.statement.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.preference.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.attachment.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.end {
            my_size += 2;
        }
        if let Some(ref v) = self.avatar.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.sticker.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.keyValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.statement.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.preference.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.attachment.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.version.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.end {
            os.write_bool(6, v)?;
        }
        if let Some(ref v) = self.avatar.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.sticker.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.keyValue.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BackupFrame {
        BackupFrame::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Header>>(
                "header",
                |m: &BackupFrame| { &m.header },
                |m: &mut BackupFrame| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SqlStatement>>(
                "statement",
                |m: &BackupFrame| { &m.statement },
                |m: &mut BackupFrame| { &mut m.statement },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SharedPreference>>(
                "preference",
                |m: &BackupFrame| { &m.preference },
                |m: &mut BackupFrame| { &mut m.preference },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Attachment>>(
                "attachment",
                |m: &BackupFrame| { &m.attachment },
                |m: &mut BackupFrame| { &mut m.attachment },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DatabaseVersion>>(
                "version",
                |m: &BackupFrame| { &m.version },
                |m: &mut BackupFrame| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "end",
                |m: &BackupFrame| { &m.end },
                |m: &mut BackupFrame| { &mut m.end },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Avatar>>(
                "avatar",
                |m: &BackupFrame| { &m.avatar },
                |m: &mut BackupFrame| { &mut m.avatar },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Sticker>>(
                "sticker",
                |m: &BackupFrame| { &m.sticker },
                |m: &mut BackupFrame| { &mut m.sticker },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<KeyValue>>(
                "keyValue",
                |m: &BackupFrame| { &m.keyValue },
                |m: &mut BackupFrame| { &mut m.keyValue },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BackupFrame>(
                "BackupFrame",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BackupFrame {
        static instance: ::protobuf::rt::LazyV2<BackupFrame> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BackupFrame::new)
    }
}

impl ::protobuf::Clear for BackupFrame {
    fn clear(&mut self) {
        self.header.clear();
        self.statement.clear();
        self.preference.clear();
        self.attachment.clear();
        self.version.clear();
        self.end = ::std::option::Option::None;
        self.avatar.clear();
        self.sticker.clear();
        self.keyValue.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BackupFrame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupFrame {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rBackups.proto\x12\x06signal\"\xca\x02\n\x0cSqlStatement\x12\x1c\n\ts\
    tatement\x18\x01\x20\x01(\tR\tstatement\x12A\n\nparameters\x18\x02\x20\
    \x03(\x0b2!.signal.SqlStatement.SqlParameterR\nparameters\x1a\xd8\x01\n\
    \x0cSqlParameter\x12&\n\x0estringParamter\x18\x01\x20\x01(\tR\x0estringP\
    aramter\x12*\n\x10integerParameter\x18\x02\x20\x01(\x04R\x10integerParam\
    eter\x12(\n\x0fdoubleParameter\x18\x03\x20\x01(\x01R\x0fdoubleParameter\
    \x12$\n\rblobParameter\x18\x04\x20\x01(\x0cR\rblobParameter\x12$\n\rnull\
    parameter\x18\x05\x20\x01(\x08R\rnullparameter\"\xc6\x01\n\x10SharedPref\
    erence\x12\x12\n\x04file\x18\x01\x20\x01(\tR\x04file\x12\x10\n\x03key\
    \x18\x02\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x03\x20\x01(\tR\x05va\
    lue\x12\"\n\x0cbooleanValue\x18\x04\x20\x01(\x08R\x0cbooleanValue\x12&\n\
    \x0estringSetValue\x18\x05\x20\x03(\tR\x0estringSetValue\x12*\n\x10isStr\
    ingSetValue\x18\x06\x20\x01(\x08R\x10isStringSetValue\"^\n\nAttachment\
    \x12\x14\n\x05rowId\x18\x01\x20\x01(\x04R\x05rowId\x12\"\n\x0cattachment\
    Id\x18\x02\x20\x01(\x04R\x0cattachmentId\x12\x16\n\x06length\x18\x03\x20\
    \x01(\rR\x06length\"7\n\x07Sticker\x12\x14\n\x05rowId\x18\x01\x20\x01(\
    \x04R\x05rowId\x12\x16\n\x06length\x18\x02\x20\x01(\rR\x06length\"V\n\
    \x06Avatar\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x20\n\x0bre\
    cipientId\x18\x03\x20\x01(\tR\x0brecipientId\x12\x16\n\x06length\x18\x02\
    \x20\x01(\rR\x06length\"+\n\x0fDatabaseVersion\x12\x18\n\x07version\x18\
    \x01\x20\x01(\rR\x07version\",\n\x06Header\x12\x0e\n\x02iv\x18\x01\x20\
    \x01(\x0cR\x02iv\x12\x12\n\x04salt\x18\x02\x20\x01(\x0cR\x04salt\"\xe2\
    \x01\n\x08KeyValue\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x1c\n\
    \tblobValue\x18\x02\x20\x01(\x0cR\tblobValue\x12\"\n\x0cbooleanValue\x18\
    \x03\x20\x01(\x08R\x0cbooleanValue\x12\x1e\n\nfloatValue\x18\x04\x20\x01\
    (\x02R\nfloatValue\x12\"\n\x0cintegerValue\x18\x05\x20\x01(\x05R\x0cinte\
    gerValue\x12\x1c\n\tlongValue\x18\x06\x20\x01(\x03R\tlongValue\x12\x20\n\
    \x0bstringValue\x18\x07\x20\x01(\tR\x0bstringValue\"\x9d\x03\n\x0bBackup\
    Frame\x12&\n\x06header\x18\x01\x20\x01(\x0b2\x0e.signal.HeaderR\x06heade\
    r\x122\n\tstatement\x18\x02\x20\x01(\x0b2\x14.signal.SqlStatementR\tstat\
    ement\x128\n\npreference\x18\x03\x20\x01(\x0b2\x18.signal.SharedPreferen\
    ceR\npreference\x122\n\nattachment\x18\x04\x20\x01(\x0b2\x12.signal.Atta\
    chmentR\nattachment\x121\n\x07version\x18\x05\x20\x01(\x0b2\x17.signal.D\
    atabaseVersionR\x07version\x12\x10\n\x03end\x18\x06\x20\x01(\x08R\x03end\
    \x12&\n\x06avatar\x18\x07\x20\x01(\x0b2\x0e.signal.AvatarR\x06avatar\x12\
    )\n\x07sticker\x18\x08\x20\x01(\x0b2\x0f.signal.StickerR\x07sticker\x12,\
    \n\x08keyValue\x18\t\x20\x01(\x0b2\x10.signal.KeyValueR\x08keyValueB1\n!\
    org.thoughtcrime.securesms.backupB\x0cBackupProtos\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
